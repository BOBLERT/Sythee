local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "ðŸ’µ Silent Roblox ðŸ’µ'",
   LoadingTitle = "Silent Hub",
   LoadingSubtitle = "by SilentSythe",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Silent Roblox Hub"
   },
   Discord = {
      Enabled = true,
      Invite = "QJw7r4mX86", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("Home", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Main")

Rayfield:Notify({
   Title = "Script Successfully Executed",
   Content = "The best script out",
   Duration = 3,
   Image = nil,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "Okay!",
         Callback = function()
         print("The user tapped Okay!")
      end
   },
},
})

local infiniteJumpEnabled = false

local Button = MainTab:CreateButton({
   Name = "Inf Jump",
   Callback = function()
      infiniteJumpEnabled = not infiniteJumpEnabled
      if infiniteJumpEnabled then
         -- Enable infinite jump
         local player = game.Players.LocalPlayer
         local character = player.Character or player.CharacterAdded:Wait()
         local humanoid = character:WaitForChild("Humanoid")

         local function onJumpRequest()
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
         end

         game:GetService("UserInputService").JumpRequest:Connect(onJumpRequest)
      else
         -- Disable infinite jump (not supported natively; reload character or other means)
         -- Implement logic to disable infinite jump if necessary
      end
   end
})

local ESPTab = Window:CreateTab("ESP", nil) -- Title, Image

local Button = ESPTab:CreateButton({
   Name = "Box Esp",
   Callback = function()
      local Players = game:GetService("Players")
      local RunService = game:GetService("RunService")
      local localPlayer = Players.LocalPlayer

      local function createRedBox(player)
         if player == localPlayer then
            return
         end

         local character = player.Character or player.CharacterAdded:Wait()
         local head = character:WaitForChild("Head")

         local billboardGui = Instance.new("BillboardGui")
         billboardGui.Name = "RedBox"
         billboardGui.AlwaysOnTop = true
         billboardGui.Size = UDim2.new(4, 0, 5, 0) -- Adjust size as needed
         billboardGui.StudsOffset = Vector3.new(0, 1.5, 0) -- Adjust offset as needed
         billboardGui.Parent = head

         local frame = Instance.new("Frame")
         frame.Size = UDim2.new(1, 0, 1, 0)
         frame.BackgroundColor3 = Color3.new(1, 0, 0)
         frame.BorderSizePixel = 0
         frame.BackgroundTransparency = 0.5
         frame.Parent = billboardGui
      end

      for _, player in ipairs(Players:GetPlayers()) do
         createRedBox(player)
      end

      Players.PlayerAdded:Connect(function(player)
         player.CharacterAdded:Connect(function(character)
            createRedBox(player)
         end)
      end)

      Players.PlayerRemoving:Connect(function(player)
         if player ~= localPlayer then
            local character = player.Character
            if character then
               local head = character:FindFirstChild("Head")
               if head then
                  local redBox = head:FindFirstChild("RedBox")
                  if redBox then
                     redBox:Destroy()
                  end
               end
            end
         end
      end)
   end
})

local AimAssistTab = Window:CreateTab("Aim Assist", nil) -- Title, Image

local Button = AimAssistTab:CreateButton({
   Name = "Toggle Aim Assist",
   Callback = function()
      local aimAssistEnabled = false
      local aimAssistRadius = 100  -- Adjust the radius as needed

      local function getClosestPlayerToCursor()
         local closestPlayer = nil
         local shortestDistance = aimAssistRadius

         for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
            if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
               local character = player.Character
               local rootPart = character:FindFirstChild("HumanoidRootPart")
               if rootPart then
                  local screenPosition, onScreen = game.Workspace.CurrentCamera:WorldToViewportPoint(rootPart.Position)
                  if onScreen then
                     local mousePosition = game:GetService("UserInputService"):GetMouseLocation()
                     local distance = (Vector2.new(screenPosition.X, screenPosition.Y) - mousePosition).magnitude
                     if distance < shortestDistance then
                        closestPlayer = player
                        shortestDistance = distance
                     end
                  end
               end
            end
         end

         return closestPlayer
      end

      local function updateAimAssist()
         if aimAssistEnabled then
            local targetPlayer = getClosestPlayerToCursor()
            if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
               local rootPart = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
               if rootPart then
                  game.Workspace.CurrentCamera.CFrame = CFrame.new(game.Workspace.CurrentCamera.CFrame.Position, rootPart.Position)
               end
            end
         end
      end

      game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
         if input.KeyCode == Enum.KeyCode.G and not gameProcessed then
            aimAssistEnabled = not aimAssistEnabled
         end
      end)

      game:GetService("RunService").RenderStepped:Connect(function()
         updateAimAssist()
      end)
   end
})

local Button = MainTab:CreateButton({
   Name = "Name ESP",
   Callback = function()
   -- The function that takes place when the button is pressed
        -- Variables
local Players = game:GetService("Players")

-- Function to create a nametag for a player
local function createNametag(player)
    -- Wait for the player's character to be added to the game
    player.CharacterAdded:Connect(function(character)
        -- Wait for the character's HumanoidRootPart to be added
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

        -- Create a BillboardGui
        local billboardGui = Instance.new("BillboardGui")
        billboardGui.Adornee = humanoidRootPart
        billboardGui.Size = UDim2.new(0, 200, 0, 50)
        billboardGui.StudsOffset = Vector3.new(0, 3, 0)
        billboardGui.AlwaysOnTop = true

        -- Create a TextLabel for the name
        local nameLabel = Instance.new("TextLabel")
        nameLabel.Size = UDim2.new(1, 0, 1, 0)
        nameLabel.BackgroundTransparency = 1
        nameLabel.Text = player.Name
        nameLabel.TextColor3 = Color3.new(1, 1, 1)
        nameLabel.TextStrokeTransparency = 0
        nameLabel.TextScaled = true
        nameLabel.Parent = billboardGui

        -- Parent the BillboardGui to the character
        billboardGui.Parent = character
    end)
end

-- Apply nametag creation to all existing players
for _, player in ipairs(Players:GetPlayers()) do
    createNametag(player)
end

-- Apply nametag creation to new players
Players.PlayerAdded:Connect(function(player)
    createNametag(player)
end)

   end,
})
